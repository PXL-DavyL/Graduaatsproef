name: Laravel Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  endpoints-tests:
    name: Endpoints API Tests
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./endpoints/laravel

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, sqlite3
        coverage: xdebug

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Composer Dependencies
      run: composer install --no-scripts --no-interaction --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Configure SQLite Database
      run: |
        mkdir -p database
        touch database/database.sqlite
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=${{ github.workspace }}/endpoints/laravel/database/database.sqlite" >> .env

    - name: Run Migrations
      run: php artisan migrate --force

    - name: Run PHPUnit Tests
      run: vendor/bin/phpunit --testsuite=Feature,Unit --coverage-clover=coverage.xml --exclude-group vendor
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./endpoints/laravel/coverage.xml
        flags: endpoints

  inertia-tests:
    name: Inertia CRUD Tests
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./inertia/inertia-crud

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, sqlite3
        coverage: xdebug

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Composer Dependencies
      run: composer install --no-scripts --no-interaction --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Create comprehensive Vite mock
      run: |
        # Create directory structure
        mkdir -p public/build/assets

        # Find all Vue files in the project to add to the manifest
        VUE_FILES=$(find resources -name "*.vue" | sort)
        
        # Start creating the manifest JSON
        echo "{" > public/build/manifest.json
        
        # Add standard entries
        echo '  "resources/js/app.js": {
            "file": "assets/app.js",
            "isEntry": true,
            "src": "resources/js/app.js"
          },' >> public/build/manifest.json
          
        echo '  "resources/css/app.css": {
            "file": "assets/app.css",
            "isEntry": true,
            "src": "resources/css/app.css"
          },' >> public/build/manifest.json
        
        # Add entries for each Vue file
        for file in $VUE_FILES; do
          echo "Adding $file to mock manifest"
          # Generate a safe filename for the output
          SAFE_FILENAME=$(echo "$file" | sed 's/\//_/g')
          
          # Add to manifest, with comma except for the last entry
          echo "  \"$file\": {
            \"file\": \"assets/${SAFE_FILENAME}.js\",
            \"src\": \"$file\"
          }," >> public/build/manifest.json
          
          # Create empty file
          echo "// Mock file for $file" > "public/build/assets/${SAFE_FILENAME}.js"
        done
        
        # Remove the last comma and close the JSON
        sed -i '$ s/,$//' public/build/manifest.json
        echo "}" >> public/build/manifest.json
        
        # Create empty asset files
        echo "// Mock app JS file" > public/build/assets/app.js
        echo "/* Mock app CSS file */" > public/build/assets/app.css
        
        # Check the manifest content
        echo "Generated manifest:"
        cat public/build/manifest.json

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Configure SQLite Database
      run: |
        mkdir -p database
        touch database/database.sqlite
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=${{ github.workspace }}/inertia/inertia-crud/database/database.sqlite" >> .env

    - name: Run Migrations
      run: php artisan migrate --force

    - name: Configure Testing Environment
      run: |
        echo "INERTIA_TESTING=1" >> .env
        php artisan config:clear

    - name: Run PHPUnit Tests
      run: vendor/bin/phpunit --testsuite=Feature,Unit --coverage-clover=coverage.xml --exclude-group vendor
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./inertia/inertia-crud/coverage.xml
        flags: inertia
